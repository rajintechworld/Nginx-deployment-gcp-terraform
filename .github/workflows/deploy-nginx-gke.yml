name: Deploy Nginx to GKE

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

  deploy-k8s:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ✅ Authenticate with GCP
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      # ✅ Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: "latest"

      # ✅ Install the GKE Auth Plugin
      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      # ✅ Configure kubectl with GKE Cluster
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials nginx-gke-cluster \
          --region us-central1 \
          --project $(echo '${{ secrets.GOOGLE_CREDENTIALS }}' | jq -r '.project_id')

      # ✅ Verify Cluster Connection
      - name: Verify Cluster Connection
        run: |
          kubectl get nodes

      # ✅ Deploy Nginx to GKE
      - name: Deploy Nginx
        run: |
          cat <<EOF > nginx-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-deployment
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                - name: nginx
                  image: nginx:latest
                  ports:
                  - containerPort: 80
          EOF

          cat <<EOF > nginx-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-service
          spec:
            selector:
              app: nginx
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
            type: LoadBalancer
          EOF

          kubectl apply -f nginx-deployment.yaml
          kubectl apply -f nginx-service.yaml
